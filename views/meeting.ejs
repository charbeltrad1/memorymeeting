
<%- include('partials/header.ejs'); -%>


<div class="card">
  <div class="card-body">
    <br>
    <br>
    <h1 class="card-title"><%= mymeeting.title%></h1>

    <hr>

    <h4 class="card-subtitle mb-2 text-muted">Meeting Details</h4>
    <p class="card-text card-date"><%= mymeeting.date%></p>
    <p class="card-text card-location"><%= mymeeting.location%></p>
    <p class="card-text"><b>URL:</b> <%= mymeeting.meetinglink %></p>

    <hr>

    <h4 class="card-subtitle mb-2 text-muted">Participants</h4>
    <select id='my-dropdown-participants' class="form-select" aria-label="Participants">
      <% mymeeting.participants.forEach(function(participant) { %>
        <option value="<%= participant %>"><%= participant %></option>
      <% }); %>
    </select>

    <hr>

    <h4 class="card-subtitle mb-2 text-muted">Topics</h4>
    <select id='my-dropdown-topics' class="form-select" aria-label="Topics">
      <% mymeeting.topics.forEach(function(topic) { %>
        <option value="<%= topic %>"><%= topic %></option>
      <% }); %>
    </select>

    <hr>

    <h4 class="card-subtitle mb-2 text-muted">Description</h4>
    <p class="card-text"><%= mymeeting.description %></p>

    <hr>

    <h4 class="card-subtitle mb-2 text-muted">Live Transcript</h4>
    <div id="transcript-display">
      <ul id="transcript-list"></ul>
    </div>

    <hr>

    <button class="btn btn-danger" onclick='deleteElement("<%= mymeeting._id %>")'>Delete</button>
    <button class="btn btn-primary" id="record-button" onclick="startRecording()">Record</button>
    <button class="btn btn-success" id="save-button" onclick='saveRecording("<%= mymeeting._id %>")'>Save</button>
  </div>
</div>

<script>
  console.log("test0")
</script>

      <script>

        //on remplit la description avec les éléments de la base de données

        console.log(mymeeting.transcription)
        //const tableau2 = mymeeting.description;
        const tableau = ["Bonjour", "Comment ça va ?", "Bien et toi ?"]
        const divTableau = document.getElementById("transcript-list");
        let htmlTableau = "";
        for (let i = 0; i < tableau.length; i++) {
          htmlTableau += "<li>" + tableau[i] + "</li>";
        }
        divTableau.innerHTML = htmlTableau;




        let meetingtranscript=[];//changer pour éviter le reset à chaque fois
        var button = document.getElementById("record-button");

        function deleteElement(id){
          console.log(id);
          fetch('/deleteElement', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({_id:id})
          })
          .then(response => {
            // handle the response from the server
            console.log(response);
            location.replace("/meetings")
          })
          .catch(error => {
            // handle any errors that occur during the request
            console.error(error);
          });
        }

        const startRecording = () => {
          const constraints = { audio: true };
          navigator.mediaDevices.getUserMedia({ audio: true })
          .then(stream => {
            const recognition = new window.webkitSpeechRecognition();
            recognition.continuous = true; // listen for speech until stopped
            recognition.lang = navigator.language;
            recognition.start();

            recognition.addEventListener('result', event => {
              button.style.backgroundColor = "green";

              for (let i = event.resultIndex; i < event.results.length; i++) {
                const result = event.results[i];
                const transcriptionText = result[0].transcript;
                const speaker = document.getElementById("my-dropdown-participants").value;
                const topic = document.getElementById("my-dropdown-topics").value;
                meetingtranscript.push({"name":speaker,"topic":topic,"transcription":transcriptionText});

                // Update the display with the current speaker and topic
                const display = document.getElementById("transcript-list");
                const currentLine = document.createElement("li");
                currentLine.innerHTML = `<b>${speaker} (${topic}):</b> ${transcriptionText}`;
                display.appendChild(currentLine);
              }
            });

            recognition.addEventListener('end', () => {
              button.style.backgroundColor = "#2980B9";

              // Speech recognition has ended
              console.log('Speech recognition has ended.');

              // Stop the media stream
              stream.getTracks().forEach(track => track.stop());
            });
          })
          .catch(error => {
            console.error('Error accessing microphone:', error);
          });

        };


        const saveRecording = async (id) => {
          console.log(meetingtranscript);
          recording = false;
          let options = {
            method: "POST",
            body: JSON.stringify({"id":id,"transcription":meetingtranscript}),
            headers: {
              'Content-Type': 'application/json'
            },
          };
          fetch("/save-audio", options)
          .then(response => {
            if (!response.ok) {
              throw new Error("Failed to upload audio");
            }
            console.log("Transcript uploaded successfully");
            console.log(response.message);
          })
          .catch(error => {
            console.log("error");
            console.error(error);
          });
        };



      </script>

<%- include('partials/footer.ejs'); %>