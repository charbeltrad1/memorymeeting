
<%- include('partials/header.ejs'); -%>
<script>
  let meetingtranscript =[];
  var button = document.getElementById("record-button");


  function toggleNote(index) {
    const noteDiv = document.getElementById("note-" + index);
    noteDiv.classList.toggle("note-show");
  }

  function saveNote(id_meeting, index) {
    const noteInput = document.getElementById("note-input-" + index);
    try {
      mymeeting.transcription[index].note = noteInput.value;

    } catch (e) {
      console.log(e);
    }
    const options = {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({indexNote:index, id_meeting:id_meeting})
    }
    fetch('/saveNote', options)
            .then(response => {
              // handle the response from the server
              console.log(response);
            })
            .catch(error => {
              // handle any errors that occur during the request
              console.error(error);
            });
    console.log("Note for sentence " + index + ": " + note);
  }

  function deleteElement(id){
    console.log(id);
    fetch('/deleteElement', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({_id:id})
    })
            .then(response => {
              // handle the response from the server
              console.log(response);
              location.replace("/meetings")
            })
            .catch(error => {
              // handle any errors that occur during the request
              console.error(error);
            });
  }

  const startRecording = () => {
    const constraints = { audio: true };
    navigator.mediaDevices.getUserMedia({ audio: true })
            .then(stream => {
              const recognition = new window.webkitSpeechRecognition();
              recognition.continuous = true; // listen for speech until stopped
              recognition.lang = document.getElementById("my-dropdown-languages").value;
              recognition.start();

              recognition.addEventListener('result', event => {
                button.style.backgroundColor = "green";

                for (let i = event.resultIndex; i < event.results.length; i++) {
                  const result = event.results[i];
                  const transcriptionText = result[0].transcript;
                  const speaker = document.getElementById("my-dropdown-participants").value;
                  const topic = document.getElementById("my-dropdown-topics").value;
                  const note = document.getElementById("note-input-" + i).value;
                  meetingtranscript.push({"name":speaker,"topic":topic,"transcription":transcriptionText,"note":note});

                  // Update the display with the current speaker and topic
                  const display = document.getElementById("transcript-list");
                  const currentLine = document.createElement("li");
                  currentLine.innerHTML = `<b>${speaker} (${topic}):</b> ${transcriptionText}`;
                  display.appendChild(currentLine);
                }
              });

              recognition.addEventListener('end', () => {
                button.style.backgroundColor = "#2980B9";

                // Speech recognition has ended
                console.log('Speech recognition has ended.');

                // Stop the media stream
                stream.getTracks().forEach(track => track.stop());
              });
            })
            .catch(error => {
              console.error('Error accessing microphone:', error);
            });

  };

  const saveRecording = async (id) => {
    console.log(meetingtranscript);
    recording = false;
    let options = {
      method: "POST",
      body: JSON.stringify({"id":id,"transcription":meetingtranscript}),
      headers: {
        'Content-Type': 'application/json'
      },
    };
    fetch("/save-audio", options)
            .then(response => {
              if (!response.ok) {
                throw new Error("Failed to upload audio");
              }
              console.log("Transcript uploaded successfully");
              console.log(response.message);
            })
            .catch(error => {
              console.log("error :");
              console.error(error);
            });
  };
</script>

<div class="card">
  <div class="card-body">
    <br>
    <br>
    <h1 class="card-title"><%= mymeeting.title%></h1>

    <hr>

    <h4 class="card-subtitle mb-2 text-muted">Meeting Details</h4>
    <p class="card-text card-date"><%= mymeeting.date%></p>
    <p class="card-text card-location"><%= mymeeting.location%></p>
    <p class="card-text"><b>URL:</b> <%= mymeeting.meetinglink %></p>

    <hr>

    <h4 class="card-subtitle mb-2 text-muted">Participants</h4>
    <select id='my-dropdown-participants' class="form-select" aria-label="Participants">
      <% mymeeting.participants.forEach(function(participant) { %>
        <option value="<%= participant %>"><%= participant %></option>
      <% }); %>
    </select>

    <hr>

    <h4 class="card-subtitle mb-2 text-muted">Topics</h4>
    <select id='my-dropdown-topics' class="form-select" aria-label="Topics">
      <% mymeeting.topics.forEach(function(topic) { %>
        <option value="<%= topic %>"><%= topic %></option>
      <% }); %>
    </select>

    <hr>

    <h4 class="card-subtitle mb-2 text-muted">Description</h4>
    <p class="card-text"><%= mymeeting.description %></p>

    <hr>

    <h4 class="card-subtitle mb-2 text-muted">Language</h4>
    <select id='my-dropdown-languages' class="form-select" aria-label="languages">
      <option value="en-US">English</option>
      <option value="fr-FR">French</option>
    </select>
    
    <hr>
    <h4 class="card-subtitle mb-2 text-muted">Transcript</h4>
    <div id="transcript-display">
      <ul id="transcript-list">
        <% mymeeting.transcription.forEach(function(sentence, index) { %>
          <li>
            <b>[<%= sentence["name"] %>] (<%= sentence["topic"] %>):</b>
            <span class="transcription-text"><%= sentence["transcription"] %></span>
            <button class="note-toggle" onclick="toggleNote(<%= index %>)">+</button>
            <div class="note" id="note-<%= index %>">
              <textarea class="note-input" id="note-input-<%= index %>" rows="2" cols="30" placeholder="Add a note..."></textarea>
              <button class="note-save" onclick="saveNote('<%= mymeeting._id %>',<%= index %>)">Save</button>
            </div>
          </li>
        <% }); %>
      </ul>
    </div>

    <style>
      .note {
        display: none;
      }

      .note-show {
        display: block;
      }
    </style>


    <hr>

    <button class="btn btn-danger" onclick='deleteElement("<%= mymeeting._id %>")'>Delete</button>
    <button class="btn btn-primary" id="record-button" onclick='startRecording()'>Record</button>
    <button class="btn btn-success" id="save-button" onclick='saveRecording("<%= mymeeting._id %>")'>Save</button>

    <hr>

    <h4 class="card-subtitle mb-2 text-muted">Filters</h4>
    <div id="filter-display">

      <form id="filterForm">
        
        <h5><u>Topics filters:</u></h5>
        <% mymeeting.topics.forEach(function(topic) { %>
          <label>
            <input type="checkbox" name="filter" value="<%= topic %>">
            <%= topic %>
          </label>
          <br>
        <% }); %>
        <h5><u>Participants filters:</u></h5>

        <% mymeeting.participants.forEach(function(participant) { %>
          <label>
            <input type="checkbox" name="filter" value="<%= participant %>">
            <%= participant %>
          </label>
          <br>
        <% }); %>
        <br>
      <button type="submit">Apply Filters</button>
    </form>

    </div>
    
  </div>
</div>

<%- include('partials/footer.ejs'); %>